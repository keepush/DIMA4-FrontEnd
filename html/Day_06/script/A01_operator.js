/*
    Javascript 연산자

    1) 산술 연산자: + - * / % **(거듭제곱 연산자)

    2) 증감 연산자: ++ --

    3) 비교 연산자: == === != !== >= <= > <
        -> == 동등 / === 일치이므로 의미에 차이가 있음

    4) 논리 연산자: && || !(단항 연산자)
        -> short circuit

    5) 삼항 연산자(조건 연산자): (조건식) ? 참 : 거짓;
        -> Java에서는 조건식 앞에 변수 선언이 필요함
        -> 참, 거짓 위치에 실행문이 들어감

    6) typeof(단항 연산자): typeof 오른쪽의 변수가 어떤 타입인지 출력

    7) 비트 연산자: >>(값을 오른쪽으로 비트 이동) << ~ 등
        -> ~ : 1's complement 연산자 -> 0은 1, 1은 0으로 변경

    8) 대입 연산자: LV = RV (LV는 변수만 가능)

    9) 복합 대입 연산자: += -= /= 등

    10) 전개 연산자(spread operator): ...(여러 개의 데이터가 모여 있는 경우(배열 혹은 객체), 포함된 값들을 펼치는 연산자)
        -> 함수의 파라미터에서 사용
        -> 대입 연산자에서 사용되는 경우가 있음
        사용 예시) 변수, 변수 = ...배열
*/

let a = 3;
console.log(`${a}의 세제곱 = ${a ** 3}`);

// 동등/일치 연산자
let x = '3';
console.log(`${a}과(와) '${x}'의 동등 여부: ${a == x}`);    // 문자열을 parsing했을 때의 값이 같으면 true
console.log(`${a}과(와) '${x}'의 일치 여부: ${a === x}`);   // 문자열을 parsing한 값과 type이 모두 같아야 true

let b = 10;
console.log(`${b}은(는) 0~50의 값?: ${b >= 0 && b <= 50}`); // true
console.log(`${b}은(는) 0~50의 값?: ${0 <= b <= 50}`);      // false (JS는 두 단계에 걸쳐 계산함)

/*
    Short circuit(단축평가)
    - 왼쪽 연산의 결과에 따라서 오른쪽 연산의 실행 여부를 결정하는 기능
    - 논리 연산자 (&& ||)

    < && > : 둘 중 하나만 false이면 결과도 false
    T && ? --> ? (전체 연산의 결과가 미지수이므로 두 번째 연산을 실행)
    F && ? --> F (전체 연산의 결과가 F이므로 두 번째 연산을 실행하지 않음) -> short circiut

    < || > : 둘 중 하나만 true이면 결과도 true
    T || ? --> T (전체 연산의 결과가 T이므로 두 번째 연산을 실행하지 않음) -> short circiut
    F || ? --> ? (전체 연산의 결과가 미지수이므로 두 번째 연산을 실행)
*/

console.log("---------- 단축평가 실습 ----------");
/* 시험 출제 */
let c = 1;
c > 1 || console.log("실행 가능?");     // 앞의 식이 false이므로 뒤의 clg 내용이 실행됨
c == 1 || console.log("실행 가능?");    // 앞의 식이 true이므로 뒤의 clg 내용이 실행되지 않음

console.log("---------- 삼항(조건) 연산자 실습 ----------");
// 식) 조건식 ? 참일 때 실행문 : 거짓일 때 실행문
let d = 5;
let e = 3;
d > e ? console.log(`${d}가 ${e}보다 크다.`) : console.log(`${d}가 ${e}보다 작다.`);

console.log("---------- 전개 연산자 (spread 연산자) ----------");
let obj1 = { name: '윤수' };
// console.log(obj1);
let obj2 = { name: '김정미' };
let obj3 = { addr: '경기도 양주시' };

let obj31 = { ...obj1, ...obj2 };
console.log(obj31); // 출력 결과: {name: '김정미'}

let obj32 = { ...obj2, ...obj3 };
console.log(obj32); // 출력 결과: {name: '김정미', addr: '경기도 양주시'}

// let obj33 = [...obj2, ...obj3]; // Syntax Error는 X / obj2, obj3가 iterable이 아님 -> 실행 시, 오류 발생
// console.log(obj33);

console.log("---------- 배열에 전개 연산자 사용 ----------");
let ary1 = [1, 3, 5, 7];
let ary2 = [2, 4, 6, 8];

let ary41 = [...ary1, ...ary2];
console.log(ary41); // 출력 결과: [1, 3, 5, 7, 2, 4, 6, 8]

let ary42 = { ...ary1, ...ary2 };
console.log(ary42); // 출력 결과: {0: 2, 1: 4, 2: 6, 3: 8}
// -> 방 번호가 키 역할을 함
// 예시) {0: 1, 1: 3, 2: 5, 3: 7}, {0: 2, 1: 4, 2: 6, 3: 8} 이므로 중복된 방 번호의 데이터는 뒷 데이터만 살아남음